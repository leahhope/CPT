snake test;
food food1;
int highScore;

void setup(){
  size(500, 500);
  frameRate(10);
  test = new snake();
  food1 = new food();
  rectMode(CENTER);
  textAlign(CENTER, CENTER);
  
  highScore = 0;
}


void draw(){
  background(0);
  drawScoreboard();
  
  test.move();
  test.display();
  food1.display();
  
  
  if( dist(food1.xpos, food1.ypos, test.xpos.get(0), test.ypos.get(0)) < test.sidelen ){
    food1.reset();
    test.addLink();
  }
  
  if(test.len > highScore){
    highScore= test.len;
  }
}


void keyPressed(){
  if(key == CODED){
    if(keyCode == LEFT){
      test.dir = "left";
    }
    if(keyCode == RIGHT){
      test.dir = "right";
    }
    if(keyCode == UP){
      test.dir = "up";
    }
    if(keyCode == DOWN){
      test.dir = "down";
    }
  }
}


void drawScoreboard(){
  // All of the scode for code and title
  
  fill(255);
  textSize(20);
  text( "Snake Game", width/2, 80);
  fill(250, 0, 250);
  textSize(20);
  
  // draw scoreboard
  noStroke();
  fill( 0 );
  rect(90, 70, 160, 80);
  fill(255);
  textSize(17);
  text( "Score: " + test.len, 70, 50);
  
  fill(255);
  textSize(17);
  text( "High Score: " + highScore, 70, 70);
}

class food{
  
  // define varibles
  float xpos, ypos;
  
  
  
  //constructor
  food(){
    xpos = random(100, width - 100);
    ypos = random(100, height - 100);
  }
  
  
  // functions
 void display(){
   
   noStroke();
   fill(255,0,0);
   ellipse(xpos, ypos,17,17);
 }
 
 
 void reset(){
    xpos = random(100, width - 100);
    ypos = random(100, height - 100);
 }   
}

class snake{
  
  //define varibles
  int len;
  float sidelen;
  String dir; 
  ArrayList <Float> xpos, ypos;
  
  // constructor
  snake(){
    len = 1;
    sidelen = 17;
    dir = "right";
    xpos = new ArrayList();
    ypos = new ArrayList();
    xpos.add( random(width) );
    ypos.add( random(height) );
  }
  
  // functions
  
  
  void move(){
   for(int i = len - 1; i > 0; i = i -1 ){
    xpos.set(i, xpos.get(i - 1));
    ypos.set(i, ypos.get(i - 1));  
   } 
   if(dir == "left"){
     xpos.set(0, xpos.get(0) - sidelen);
   }
   if(dir == "right"){
     xpos.set(0, xpos.get(0) + sidelen);
   }
   
   if(dir == "up"){
     ypos.set(0, ypos.get(0) - sidelen);
  
   }
   
   if(dir == "down"){
     ypos.set(0, ypos.get(0) + sidelen);
   }
   xpos.set(0, (xpos.get(0) + width) % width);
   ypos.set(0, (ypos.get(0) + height) % height);
   
    // check if hit itself and if so cut off the tail
    if( checkHit() == true){
      len = 1;
      float xtemp = xpos.get(0);
      float ytemp = ypos.get(0);
      xpos.clear();
      ypos.clear();
      xpos.add(xtemp);
      ypos.add(ytemp);
    }
  }
  
  
  
  void display(){
    for(int i = 0; i <len; i++){
      stroke(0);
      fill(127,255,0);
      rect(xpos.get(i), ypos.get(i), sidelen, sidelen);
    }  
  }
  
  
  void addLink(){
    xpos.add( xpos.get(len-1) + sidelen);
    ypos.add( ypos.get(len-1) + sidelen);
    len++;
  }
  
   boolean checkHit(){
    for(int i = 1; i < len; i++){
     if( dist(xpos.get(0), ypos.get(0), xpos.get(i), ypos.get(i)) < sidelen){
       return true;
     } 
    } 
    return false;
   } 
}



#this is the game in python that does not work
import random

def setup():
    size(1000,600)
    frameRate(10)
    highScore = 0

def draw():
    background(0)
    drawScoreboard()
        
def drawScoreboard():
    fill(255)
    textSize(50)
    text("Snake Game", width/3, 80)
    fill(250, 0, 250)
    textSize(20)
    
    #draw scoreboard
    stroke(255)
    fill(255)
    textSize(17)
    text("Score: " , 70, 50)
    
    fill(255)
    textSize(17)
    text("High Score: ",70, 70)

def draw_snake():
    fill(127,255,0)
    rect(25, 25)
    
def draw_food():
    noStroke
    fill(255,0,0)
    ellipse(25, 25, 20, 20)
    
segments = []

def keyPressed():
    global space_pressed, up_pressed
    print(keyCode)
    if keyCode == 32:  # space keycode is 32
        space_pressed = True
    elif keyCode == 38:  # up arrow
        up_pressed = True
    

#main game loop
while True:
    #check for collison with the border
    if snake.xcord()>1000 or snake.xcord()<-1000 or snake.ycord()>600 or snake.ycord()<-600:
        
    #The segments
        for segment in segments:
            segemnt.goto(1000,1000)
        
    #clear segement list
    segments.clear()
    
    #reset the score
    score = 0
    
    #reset the delay
    speed = 0.1
    
    text("Score:{} High Score: {}".format(score, high_score,)
         
    #Check for a collision with the food
    if snake.distance(food) < 20:
        #move the food to a random spot
        x = random.randit(-290, 290)
        y = random.randit(-290, 290)
        food.goto(x,y)
        
        #add a segment
    def draw_segment():
        fill(127,255,0)
        rect(segement_x, segment_y, 25, 25))
        segements.append(new_segment)
        
        #increase the score
        score += 10
        
        if score > high_score:
            high_score = score
            
        text.clear
        stroke(255)
        fill(255)
        textSize(17)
        text("Score: " , 70, 50)
    
        fill(255)
        textSize(17)
        text("High Score: ",70, 70)
        
    #move the end segments first in reverse order
    for index in range(len(segments)-1, 0, -1):
        x = segements[index-1].xcor()
        y = segements[index-1].ycor()
        segements[index].goto(x,y)
        
    #move segment 0 to where the head is
    if len(segments) > 0:
        x = snake.xcor()
        y = snake.ycor()
        segments[0].goto(x,y0
                         
    move()
    
    #check for collision with the body
    for segment in segments:
        if segemnt.distance(head) < 20:
            head.goto(0,0)
            
            #hide the segments
            for segment in segments:
                segment.goto(1000,1000)
                
            #clear the segements list
            segmens.clear()
            
            #reset the score
            score = 0
            
            #update the score
            text.clear
            stroke(255)
            fill(255)
            textSize(17)
            text("Score: " , 70, 50)
    
            fill(255)
            textSize(17)
            text("High Score: ",70, 70)
            
mainloop()

